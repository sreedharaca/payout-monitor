<?php

namespace Katana\OfferBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Katana\DictionaryBundle\Entity\Device;
use Katana\DictionaryBundle\Entity\Platform;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Katana\OfferBundle\Entity\App;
use Katana\AffiliateBundle\Entity\Affiliate;
use Katana\OfferBundle\Entity\Offer;

/**
 * OfferRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OfferRepository extends EntityRepository
{
    public function findAllOffers($sort = 'created', $order = 'desc')
    {
        $qb = $this->createQueryBuilder('offer')
            ->select('offer, d, c, app')
            ->leftJoin('offer.app', 'app')
            ->leftJoin('offer.devices', 'd')
            ->leftJoin('offer.countries', 'c')
//            ->leftJoin('offer.affiliate', 'a')
//            ->orderBy('offer.' . $sort, $order);
            ->where('offer.deleted != 1')
        ;

        return $qb->getQuery()->execute();
    }

    public function findAllMobile(){

        $qb = $this->createQueryBuilder('offer')
            ->select('offer, d, c, app')
            ->join('offer.platform', 'p')
            ->leftJoin('offer.app', 'app')
            ->leftJoin('offer.devices', 'd')
            ->leftJoin('offer.countries', 'c')
            ->where('offer.deleted != 1')
            ->andWhere('p.name IN (:platforms)')
            ->setParameter(':platforms', array(Platform::IOS, Platform::ANDROID))
        ;

        return $qb->getQuery()->execute();

    }

    public function findAllOffersWithApps($sort = 'created', $order = 'desc')
    {
        $qb = $this->createQueryBuilder('offer')
            ->select('offer, d, c, a, app')
            ->join('offer.app', 'app')
            ->leftJoin('offer.devices', 'd')
            ->leftJoin('offer.countries', 'c')
            ->leftJoin('offer.affiliate', 'a')
            ->orderBy('offer.' . $sort, $order);
        ;

        return $qb->getQuery()->execute();
    }

    public function getByFiltersData($data)
    {
        $qb = $this->createQueryBuilder('offer')
            ->select('offer, d, c, a, app')
            ->leftJoin('offer.app', 'app')
            ->leftJoin('offer.devices', 'd')
            ->leftJoin('offer.countries', 'c')
            ->leftJoin('offer.affiliate', 'a')
        ;

        /** Affiliate */
        if(!empty($data['affiliate']) && is_object($data['affiliate']))
        {
            $qb
//                ->join('offer.affiliate', 'affiliate')
                ->andWhere('a = :affiliate')
                ->setParameter('affiliate', $data['affiliate']);
        }

        /** Страна */
        if( !empty($data['country']) && ($data['country'] instanceof ArrayCollection) && count($data['country']->toArray()) )
        {
            $country_ids = array();
            foreach($data['country'] as $country){
                $country_ids[] = $country->getId();
            }

            $qb
//                ->join('offer.countries', 'c')
                ->andWhere('c.id IN (:country_ids)')
                ->setParameter('country_ids', $country_ids);
        }

        /** Платформа */
        if( !empty($data['platform']) && ($data['platform'] instanceof ArrayCollection) && count($data['platform']->toArray()) )
        {
            $platform_ids = array();
            foreach($data['platform'] as $platform){
                $platform_ids[] = $platform->getId();
            }
            $qb
                ->leftJoin('offer.platform', 'p')
                ->andWhere('p.id IN (:platform_ids)')
                ->setParameter('platform_ids', $platform_ids );
        }

        /** Девайс */
        if( !empty($data['device']) && ($data['device'] instanceof ArrayCollection) && count($data['device']->toArray()) )
        {
            $device_ids = array();
            foreach($data['device'] as $device){
                $device_ids[] = $device->getId();
            }
            $qb
//                ->join('offer.devices', 'd')
                ->andWhere('d.id IN (:device_ids)')
                ->setParameter('device_ids', $device_ids );
        }

        /** Incent */
        if( !empty($data['incentive']))
        {
            $qb->andWhere('offer.incentive = :incentive')
                ->setParameter('incentive', $data['incentive']);
        }

        /** New */
        if( !empty($data['new']))
        {
            $qb->andWhere('offer.new = :new')
                ->setParameter('new', $data['new']);
        }

        /** Search */
        if( !empty($data['search']))
        {
            $qb->andWhere('lower(offer.name) LIKE :search OR lower(app.name) LIKE :search')
                ->setParameter('search', strtolower('%' . $data['search'] . '%'));
        }

//        echo $qb->getQuery()->getSQL();

        return $qb->getQuery()->execute();
    }

    public function findIOS()
    {
        $Platform = $this->getRepository("KatanaDoictionaryBundle:Platform")->findOneByName(Platform::IOS);

        if(empty($Platform)){
            throw new \Exception('Не найдена платформа:' . Platform::IOS);
        }

        $qb = $this->createQueryBuilder('o')
            ->select('o')
            ->join('o.platform', 'p')
            ->where('p = :platform')
            ->setParameter(':platform', $Platform);

        return $qb->getQuery()->execute();
    }

    public function getNoneApps(){
        $qb = $this->createQueryBuilder('offer')
            ->select('offer, d, c, p')
            ->leftJoin('offer.devices', 'd')
            ->leftJoin('offer.countries', 'c')
            ->leftJoin('offer.platform', 'p')
            ->where("NOT (offer.app > 0)")
            ->andWhere("offer.deleted = 0")
//            ->andWhere("offer.active = 1")
        ;

        return $qb->getQuery()->execute();
    }

    public function batchDeactivate($ids, $Affiliate)
    {
        if( ! count($ids) ){
            return false;
        }

        $this->createQueryBuilder('o')
            ->update('Katana\OfferBundle\Entity\Offer', 'o') //$this->getClassName()
            ->set('o.active', 0)
            ->set('o.deleted', 1)
            ->where('o.external_id IN (:ids)')
            ->andWhere('o.affiliate = (:affiliate)')
            ->setParameter('ids', $ids)
            ->setParameter('affiliate', $Affiliate)
            ->getQuery()->execute()
        ;
    }


    /***
     * Загрузка данных Itunes приложений
     *
     * для тех у которых платформа Ios, и app.name и app.iconUrl пустые
     */
    public function findByEmptyApps()
    {
        $qb = $this->createQueryBuilder('offer');

        $qb->select('offer, app, p')

            ->join('offer.app', 'app')
            ->join('offer.platform', 'p')

            ->where('p.name = :platform')
            ->setParameter(':platform', Platform::IOS)

            ->andWhere(
                $qb->expr()->orX()
                    ->add('app.name IS NULL')
                    ->add("app.name = ''")
                    ->add('app.icon_url IS NULL')
                    ->add("app.icon_url = ''")
            )
        ;

        return $qb->getQuery()->execute();
    }

    public function findBestByApp(App $app){

        $qb = $this->createQueryBuilder('offer')
            ->select('offer, d, c, a, app')
            ->join('offer.app', 'app')
            ->leftJoin('offer.devices', 'd')
            ->leftJoin('offer.countries', 'c')
            ->leftJoin('offer.affiliate', 'a')
            ->where('offer.app = :app')
            ->setParameter('app', $app)
            ->orderBy('offer.payout', 'DESC')
        ;

        $query = $qb->getQuery();

        $query->setMaxResults(1);

        return $query->execute();
    }

    public function getByAjaxData($data)
    {
        $qb = $this->createQueryBuilder('offer')
            ->select('offer, d, c, a, app')
            ->leftJoin('offer.app', 'app')
            ->leftJoin('offer.devices', 'd')
            ->leftJoin('offer.countries', 'c')
            ->leftJoin('offer.affiliate', 'a')
        ;

        $qb->where('offer.active = 1')
            ->andWhere('offer.deleted = 0');

        /** Affiliate */
        if( !empty($data['affiliate']) )
        {
            $qb
//                ->join('offer.affiliate', 'affiliate')
                ->andWhere('a.id = :affiliate')
                ->setParameter('affiliate', $data['affiliate']);
        }

        /** Страна */
        if( !empty($data['country']) && is_array($data['country']) && count($data['country'])>0 )
        {
            $country_ids = array();
            foreach($data['country'] as $country){
                $country_ids[] = $country;
            }

            $qb
//                ->join('offer.countries', 'c')
                ->andWhere('c.id IN (:country_ids)')
                ->setParameter('country_ids', $country_ids);
        }

        /** Платформа */
        if( !empty($data['platform']) && is_array($data['platform']) && count($data['platform'])>0 )
        {
            $platform_ids = array();
            foreach($data['platform'] as $platform){
                $platform_ids[] = $platform;
            }
            $qb
                ->leftJoin('offer.platform', 'p')
                ->andWhere('p.id IN (:platform_ids)')
                ->setParameter('platform_ids', $platform_ids );
        }

        /** Девайс */
        if( !empty($data['device']) && is_array($data['device']) && count($data['device'])>0 )
        {
            $device_ids = array();
            foreach($data['device'] as $device){
                $device_ids[] = $device;
            }
            $qb
//                ->join('offer.devices', 'd')
                ->andWhere('d.id IN (:device_ids)')
                ->setParameter('device_ids', $device_ids );
        }

        /** Incent */
        if( !empty($data['incentive']))
        {
            $qb->andWhere('offer.incentive = :incentive')
                ->setParameter('incentive', $data['incentive']);
        }

        /** New */
        if( !empty($data['new']))
        {
            $qb->andWhere('offer.new = :new')
                ->setParameter('new', $data['new']);
        }

        /** Search */
        if( !empty($data['search']))
        {
            $qb->andWhere('lower(offer.name) LIKE :search OR lower(app.name) LIKE :search')
                ->setParameter('search', strtolower('%' . $data['search'] . '%'));
        }

//        echo $qb->getQuery()->getSQL();

        return $qb->getQuery()->execute();
    }

    /***********************************************
     * TEST
     */
    public function getMaxPayoutOffersIds()
    {
        /** GET MAX OFFERS IDS */
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('id', 'id');

        $main_query = <<<Query
        SELECT
            o.id
        FROM
            offer AS o
        INNER JOIN
            (SELECT
                offer.app_id AS app_id,
                max(offer.payout) AS max_payout
            FROM
                offer
            WHERE
                offer.deleted = 0 AND
                offer.active = 1
            GROUP BY
                offer.app_id
            ) AS x
        ON
            (o.app_id = x.app_id AND
            o.payout = x.max_payout)
Query;

        $query = $this->_em->createNativeQuery($main_query, $rsm);

        $result = $query->getResult();

        $offer_ids = array();

        foreach($result as $r)
        {
            $offer_ids[] = $r['id'];
        }

        return $offer_ids;
    }


    public function getTest($data)
    {
        $qb = $this->createQueryBuilder('offer')
//            ->select('offer.id as offer_id, app.id as app_id, offer.payout as payout')
            ->select('offer, app, a, p, c, d')
            ->join('offer.app', 'app')
            ->leftJoin('offer.affiliate', 'a')
            ->leftJoin('offer.platform', 'p')
            ->leftJoin('offer.countries', 'c')
            ->leftJoin('offer.devices', 'd')
        ;

        $qb->where('offer.active = 1')
            ->andWhere('offer.deleted = 0')
        ;

        /** OFFER IDS  */
//        if( ! empty($offer_ids) )
//        {
//            $qb->andWhere('offer.id IN (:offer_ids)')
//                ->setParameter('offer_ids', $offer_ids);
//        }

        /** Affiliate */
        if( !empty($data['affiliate']) )
        {
            $qb
                ->andWhere('a.id = :affiliate')
                ->setParameter('affiliate', $data['affiliate']);
        }

        /** Страна */
        if( !empty($data['country']) && is_array($data['country']) && count($data['country'])>0 )
        {
            $country_ids = array();
            foreach($data['country'] as $country){
                $country_ids[] = $country;
            }

            $qb
                ->andWhere('c.id IN (:country_ids)')
                ->setParameter('country_ids', $country_ids);
        }

        /** Платформа */
        if( !empty($data['platform']) && is_array($data['platform']) && count($data['platform'])>0 )
        {
            $platform_ids = array();
            foreach($data['platform'] as $platform){
                $platform_ids[] = $platform;
            }
            $qb
                ->andWhere('p.id IN (:platform_ids)')
                ->setParameter('platform_ids', $platform_ids );
        }

        /** Девайс */
        if( !empty($data['device']) && is_array($data['device']) && count($data['device'])>0 )
        {
            $device_ids = array();
            foreach($data['device'] as $device){
                $device_ids[] = $device;
            }
            $qb
                ->andWhere('d.id IN (:device_ids)')
                ->setParameter('device_ids', $device_ids );
        }

        /** Incent */
        if( isset($data['incentive']) && $data['incentive'] )
        {
            $qb->andWhere('offer.incentive = 1');
        }

        /** New */
        if( isset($data['new']) && $data['new'] )
        {
            $qb->andWhere('offer.new = 1');
        }

        /** Search */
        if( !empty($data['search']))
        {
            $qb->andWhere('lower(offer.name) LIKE :search OR lower(app.name) LIKE :search')
                ->setParameter('search', strtolower('%' . $data['search'] . '%'));
        }


//        /** Группировка */
//        $qb->groupBy('offer.app');


//        /** Сортировка
//         *
//         * payout   => offer.payout
//         * platform => p.name
//         * network  => affiliate.name
//         * name     => offer.name
//         */

//        switch($data['sort_column']){
//            case 'name':
//                $sort_column = 'offer.name';
//                break;
//            case 'platform':
//                $sort_column = 'p.name';
//                break;
//            case 'network':
//                $sort_column = 'a.name';
//                break;
//            default: // 'payout'
//                $sort_column = 'offer.payout';
//                break;
//        }

//        $sort_dir = $data['sort_asc'] === true ? 'ASC' : 'DESC';

//        $qb->orderBy($sort_column, $sort_dir);


//        /** Пагинация */
//        if($offset){
//            $qb->setFirstResult($offset);
//        }

//        $qb->setMaxResults($limit = 50);

//        $paginator = new Paginator($qb->getQuery(), $fetchJoinCollection = false);

//        return $paginator;

        return $qb->getQuery()->execute();

    }


    public function SortAndLimitByOfferIds($offer_ids, $sortData, $Offset = 0)
    {
        $qb = $this->createQueryBuilder('offer')
            ->select('offer, d, c, a, app, p')
            ->join('offer.app', 'app')
            ->leftJoin('offer.devices', 'd')
            ->leftJoin('offer.countries', 'c')
            ->leftJoin('offer.affiliate', 'a')
            ->leftJoin('offer.platform', 'p')
        ;

//        $qb->where('offer.active = 1')
//            ->andWhere('offer.deleted = 0')
//        ;

        /** OFFER IDS  */
        if( ! empty($offer_ids) )
        {
            $qb->andWhere('offer.id IN (:offer_ids)')
                ->setParameter('offer_ids', $offer_ids);
        }


        switch($sortData['sort_column']){
            case 'name':
                $sort_column = 'offer.name';
                break;
            case 'platform':
                $sort_column = 'p.name';
                break;
            case 'network':
                $sort_column = 'a.name';
                break;
            default: // 'payout'
                $sort_column = 'offer.payout';
                break;
        }

        $sort_dir = $sortData['sort_asc'] === true ? 'ASC' : 'DESC';

        $qb->orderBy($sort_column, $sort_dir);


        /** Пагинация */
        if($Offset){
            $qb->setFirstResult($Offset);
        }

        $qb->setMaxResults($limit = 50);

        $paginator = new Paginator($qb->getQuery(), $fetchJoinCollection = true);

        return $paginator;
    }

    public function getWithBestPayoutsByAjaxData($data, $offset = 0)
    {
        $qb = $this->createQueryBuilder('offer')
            ->select('offer, d, c, a, app, p')
            ->join('offer.app', 'app')
            ->leftJoin('offer.devices', 'd')
            ->leftJoin('offer.countries', 'c')
            ->leftJoin('offer.affiliate', 'a')
            ->leftJoin('offer.platform', 'p')
        ;

        $qb->where('offer.active = 1')
            ->andWhere('offer.deleted = 0')
        ;

        /** Affiliate */
        if( !empty($data['affiliate']) )
        {
            $qb
//                ->join('offer.affiliate', 'affiliate')
                ->andWhere('a.id = :affiliate')
                ->setParameter('affiliate', $data['affiliate']);
        }

        /** Страна */
        if( !empty($data['country']) && is_array($data['country']) && count($data['country'])>0 )
        {
            $country_ids = array();
            foreach($data['country'] as $country){
                $country_ids[] = $country;
            }

            $qb
//                ->join('offer.countries', 'c')
                ->andWhere('c.id IN (:country_ids)')
                ->setParameter('country_ids', $country_ids);
        }

        /** Платформа */
        if( !empty($data['platform']) && is_array($data['platform']) && count($data['platform'])>0 )
        {
            $platform_ids = array();
            foreach($data['platform'] as $platform){
                $platform_ids[] = $platform;
            }
            $qb
//                ->leftJoin('offer.platform', 'p')
                ->andWhere('p.id IN (:platform_ids)')
                ->setParameter('platform_ids', $platform_ids );
        }

        /** Девайс */
        if( !empty($data['device']) && is_array($data['device']) && count($data['device'])>0 )
        {
            $device_ids = array();
            foreach($data['device'] as $device){
                $device_ids[] = $device;
            }
            $qb
//                ->join('offer.devices', 'd')
                ->andWhere('d.id IN (:device_ids)')
                ->setParameter('device_ids', $device_ids );
        }

        /** Incent */
        if( $data['incentive'] )
        {
            $qb->andWhere('offer.incentive = 1');
//                ->setParameter('incentive', $data['incentive']);
        }

        /** New */
        if( $data['new'] )
        {
            $qb->andWhere('offer.new = 1');
//                ->setParameter('new', $data['new']);
        }

        /** Search */
        if( !empty($data['search']))
        {
            $qb->andWhere('lower(offer.name) LIKE :search OR lower(app.name) LIKE :search')
                ->setParameter('search', strtolower('%' . $data['search'] . '%'));
        }


        /** Группировка */
        $qb->groupBy('offer.app');


        /** Сортировка
         *
         * payout   => offer.payout
         * platform => p.name
         * network  => affiliate.name
         * name     => offer.name
         */

        switch($data['sort_column']){
            case 'name':
                $sort_column = 'offer.name';
                break;
            case 'platform':
                $sort_column = 'p.name';
                break;
            case 'network':
                $sort_column = 'a.name';
                break;
            default: // 'payout'
                $sort_column = 'offer.payout';
                break;
        }

        $sort_dir = $data['sort_asc'] === true ? 'ASC' : 'DESC';

        $qb->orderBy($sort_column, $sort_dir);


        /** Пагинация */
        if($offset){
            $qb->setFirstResult($offset);
        }

        $qb->setMaxResults($limit = 50);

        $paginator = new Paginator($qb->getQuery(), $fetchJoinCollection = true);

        return $paginator;

//        return $query->execute();
    }


    /***
     * Получить аналоги оффера
     */
    public function getAnalogs(Offer $offer, $data)
    {
        $app = $offer->getApp();

        //нет конкурентов
        if(empty($app)){
            return null;
        }

        $qb = $this->createQueryBuilder('offer')
            ->select('offer, d, c, a, p, app')
            ->leftJoin('offer.app', 'app')
            ->leftJoin('offer.devices', 'd')
            ->leftJoin('offer.countries', 'c')
            ->leftJoin('offer.affiliate', 'a')
            ->leftJoin('offer.platform', 'p')

            ->where('offer.id != :offer_id')
            ->setParameter('offer_id', $offer->getId())

            ->andWhere('app.id = :app_id')
            ->setParameter('app_id', $app->getId())
        ;

        $qb->andWhere('offer.active = 1')
            ->andWhere('offer.deleted = 0')
        ;


        /** Affiliate */
        if( !empty($data['affiliate']) )
        {
            $qb
//                ->join('offer.affiliate', 'affiliate')
                ->andWhere('a.id = :affiliate')
                ->setParameter('affiliate', $data['affiliate']);
        }

        /** Страна */
        if( !empty($data['country']) && is_array($data['country']) && count($data['country'])>0 )
        {
            $country_ids = array();
            foreach($data['country'] as $country){
                $country_ids[] = $country;
            }

            $qb
//                ->join('offer.countries', 'c')
                ->andWhere('c.id IN (:country_ids)')
                ->setParameter('country_ids', $country_ids);
        }

        /** Платформа */
        if( !empty($data['platform']) && is_array($data['platform']) && count($data['platform'])>0 )
        {
            $platform_ids = array();
            foreach($data['platform'] as $platform){
                $platform_ids[] = $platform;
            }
            $qb
//                ->leftJoin('offer.platform', 'p')
                ->andWhere('p.id IN (:platform_ids)')
                ->setParameter('platform_ids', $platform_ids );
        }

        /** Девайс */
        if( !empty($data['device']) && is_array($data['device']) && count($data['device'])>0 )
        {
            $device_ids = array();
            foreach($data['device'] as $device){
                $device_ids[] = $device;
            }
            $qb
//                ->join('offer.devices', 'd')
                ->andWhere('d.id IN (:device_ids)')
                ->setParameter('device_ids', $device_ids );
        }

        /** Incent */
        if( $data['incentive'] )
        {
            $qb->andWhere('offer.incentive = 1');
//                ->setParameter('incentive', $data['incentive']);
        }

        /** New */
        if( $data['new'] )
        {
            $qb->andWhere('offer.new = 1');
//                ->setParameter('new', $data['new']);
        }

        /** Search */
        if( !empty($data['search']))
        {
            $qb->andWhere('lower(offer.name) LIKE :search OR lower(app.name) LIKE :search')
                ->setParameter('search', strtolower('%' . $data['search'] . '%'));
        }

        $qb->orderBy('offer.payout', 'DESC');

        return $qb->getQuery()->execute();
    }


    /***
     * Получить app_id с учетом фильтров
     */
    public function getApps($formData)
    {

    }

    /***
     * Получение суммарной статы
     */

    /*************************************************************
     * Offer Stats
     */
    public function getTotalCount()
    {
        $qb = $this->createQueryBuilder('offer')
            ->select('count(offer.id)')
            ->where('offer.deleted = 0')
            ->andWhere('offer.active = 1')
        ;

        return $qb->getQuery()->execute();
    }

    public function getCountByPlatform($platform)
    {
        $qb = $this->createQueryBuilder('offer')
            ->select('count(offer.id)')
            ->join('offer.platform', 'p')
            ->where('offer.deleted = 0')
            ->andWhere('offer.active = 1')
            ->andWhere('p.name = :pl')
            ->setParameter('pl', $platform)
        ;

        return $qb->getQuery()->execute();
    }

    /**************************************************************
     * APP Stats
     */
    public function getAppTotalCount()
    {
        $qb = $this->createQueryBuilder('offer')
            ->select('count(distinct offer.app)')
            ->join('offer.app', 'app')
//            ->join('offer.platform', 'p')
            ->where('offer.deleted = 0')
            ->andWhere('offer.active = 1')
        ;

        return $qb->getQuery()->execute();
    }

    public function getAppCountByPlatform($platform)
    {
        $qb = $this->createQueryBuilder('offer')
            ->select('count(distinct offer.app)')
            ->join('offer.app', 'app')
            ->join('offer.platform', 'p')
            ->where('offer.deleted = 0')
            ->andWhere('offer.active = 1')
            ->andWhere('p.name = :pl')
            ->setParameter('pl', $platform)
        ;

        return $qb->getQuery()->execute();
    }

    /*************************************************************
     * AFFILIATE Stats
     */
    public function getAffiliateTotalCount(Affiliate $Affiliate)
    {
        $qb = $this->createQueryBuilder('offer')
            ->select('count(offer.id)')
            ->join('offer.affiliate', 'a')
            ->where('offer.deleted = 0')
            ->andWhere('offer.active = 1')
            ->andWhere('a = :affiliate')
            ->setParameter('affiliate', $Affiliate)

        ;

        return $qb->getQuery()->execute();
    }

    public function getCountByAffiliatePlatform(Affiliate $Affiliate, $platform)
    {
        $qb = $this->createQueryBuilder('offer')
            ->select('count(offer.id)')
            ->join('offer.platform', 'p')
            ->join('offer.affiliate', 'a')
            ->where('offer.deleted = 0')
            ->andWhere('offer.active = 1')

            ->andWhere('p.name = :pl')
            ->setParameter('pl', $platform)

            ->andWhere('a = :affiliate')
            ->setParameter('affiliate', $Affiliate)
        ;

        return $qb->getQuery()->execute();
    }

}
